%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token INT FLOAT /*DOUBLE*/ VOID
%token STRUCT
%token IF ELSE WHILE DO FOR CONTINUE BREAK RETURN

primary_expression = IDENTIFIER | CONSTANT | STRING_LITERAL | '(' expression ')' ;

postfix_expression =
    primary_expression |
    postfix_expression '[' expression ']' |
    postfix_expression '(' [argument_expression_list] ')' |
    postfix_expression ('->' | '.') IDENTIFIER |
    postfix_expression ('++' | '--') |
    '(' type_name ')' '{' initializer_list [','] '}' ; //THIS ONE LOOKS VERY SCARY

unary_expression =
    postfix_expression |
    ('++' | '--') unary_expression |
    unary_operator cast_expression |
    SIZEOF (unary_expression | '(' type_name ')') ;

unary_operator = '&' | '*' | '+' | '-' | '~' | '!' ;

cast_expression = unary_expression | '(' type_name ')' cast_expression ;

multiplicative_expression = cast_expression [('*' | '/' | '%') multiplicative_expression] ;
additive_expression = multiplicative_expression [('+' | '-') additive_expression] ;
shift_expression = additive_expression [('<<' | '>>') shift_expression] ;
relational_expression = shift_expression [('<' | '>' | '<=' | '>=') relational_expression] ;
equality_expression = relational_expression [('==' | '!=') equality_expression] ;
and_expression = equality_expression ['&' and_expression] ;
exclusive_or_expression = and_expression ['^' exclusive_or_expression] ;
inclusive_or_expression = exclusive_or_expression ['|' inclusive_or_expression] ;
logical_and_expression = inclusive_or_expression ['&&' logical_and_expression] ;
logical_or_expression = logical_and_expression ['||' logical_or_expression] ;
conditional_expression = logical_or_expression ['?' expression ':' conditional_expression] ;
assignment_expression = conditional_expression | unary_expression assignment_operator assignment_expression ;
assignment_operator = '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' ;
expression = assignment_expression [',' expression] ;

argument_expression_list = assignment_expression [',' argument_expression_list] ;

type_specifier = VOID | INT | FLOAT | struct_specifier ;
struct_specifier =
    STRUCT [IDENTIFIER] '{' struct_declaration_list '}' |
    STRUCT IDENTIFIER ;
struct_declaration_list = struct_declaration [struct_declaration_list] ;
struct_declaration = type_specifier struct_declarator_list ';' ;
struct_declarator_list = declarator [',' struct_declarator_list] ;
pointer = '*' [pointer] ;
declarator = [pointer] direct_declarator;
abstract_declarator = pointer | [pointer] direct_abstract_declarator ;
direct_declarator =
    IDENTIFIER |
    '(' declarator ')' |
    direct_declarator '[' [assignment_expression] ']' |
    direct_declarator '(' [parameter_list] ')' ;
direct_abstract_declarator =
    '(' abstract_declarator ')' |
    [direct_abstract_declarator] '[' [assignment_expression] ']' |
    [direct_abstract_declarator] '(' [parameter_list] ')' ;
parameter_list = parameter_declaration [',' parameter_list] ;
parameter_declaration = type_specifier [declarator | abstract_declarator] ;
type_name = type_specifier [abstract_declarator] ;
translation_unit = external_declaration [translation_unit] ;
external_declaration = function_definition | declaration ;
function_definition = type_specifier declarator compound_statement ;
declaration = type_specifier [init_declarator_list] ';' ;
init_declarator_list = init_declarator [',' init_declarator_list] ;
init_declarator = declarator ['=' initializer] ;
initializer = assignment_expression | '{' initializer_list '}' | '{' initializer_list ',' '}' ;
initializer_list = [designation] initializer [',' initializer_list] ;
designation = designator_list '=' ;
designator_list = designator [designator_list] ;
designator = '[' conditional_expression ']' | '.' IDENTIFIER ;

statement =
    compound_statement |
    expression_statement | selection_statement |
    iteration_statement | jump_statement ;
compound_statement = '{' [block_item_list] '}' ;
block_item_list = block_item [block_item_list] ;
block_item = declaration | statement ;
expression_statement = [expression] ';' ;
selection_statement = IF '(' expression ')' statement [ELSE statement] ;
jump_statement = [CONTINUE | BREAK | RETURN [expression]] ';' ;
iteration_statement =
    WHILE '(' expression ')' statement |
    DO statement WHILE '(' expression ')' ';' |
    FOR '(' expression_statement expression_statement ')' statement |
    FOR '(' expression_statement expression_statement expression ')' statement |
    FOR '(' declaration expression_statement ')' statement |
    FOR '(' declaration expression_statement expression ')' statement ;
